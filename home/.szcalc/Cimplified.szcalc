
decls:

	DeclareAssignment (TypeName t) (VarName n) v  -> Decl (Name n) (Type t) (DType assignment) v
	Argument (TypeName t) (VarName n) -> Decl (Name n) (Type t) (DType argument)
	FunctionDeclaration (TypeName t) (FunctionName n) (@ a) b  -> Decl (Name n) (Type (ArgumentsToType (0 t) (@ a))) (DType functiondecl) (RName Frank) (Args (@ a)) b

decls2:

	ArgumentsToType (0 r) -> Void r
	ArgumentsToType (0 r x (@ b)) -> x (@ b) r
	ArgumentsToType b (Decl (Name n) (Type t) (@ z)) (@ a) -> ArgumentsToType ((@ b) t) (@ a)

builtins:

	Plus a b -> FunctionCall + a b
	Mult a b -> FunctionCall * a b
	Div a b -> FunctionCall / a b
	Sub a b -> FunctionCall - a b
	Eq a b -> FunctionCall == a b
	Leq a b -> FunctionCall <= a b

	Or a b -> FunctionCall or a b
	And a b -> FunctionCall and a b

	Negation x -> FunctionCall not x

doubleVars:

	VarName a -> Name a a
	Name a -> Name a a

	ReturnClause o -> ReturnClause o (RName Frank)

alphaUnique:

	Program (@ x) -> Program m | $galphaunique x m ((Decl (Name n k) (@ i)) n) ((Name a o) a) (Block (@ r))

returnAlphaUnique:

	Program (@ x) -> Program m | $galphaunique x m ((Decl n t (DType functiondecl) (RName p) (@ i)) p) ((RName a) a) (Decl n t (DType functiondecl) (@ r))

undoubleVars:

	Name a b -> Name a | nameof! a b

typecheckAddBuiltins:

	Program (@ a) -> Program (Decl (Name +) (Type (Int Int Int)) (DType functiondecl)) (Decl (Name or) (Type (Bool Bool Bool)) (DType functiondecl)) (@ a)

typecheckGround:

	IntLiteral x -> IntLiteral x | typeof! (IntLiteral x) Int
	BoolLiteral x -> BoolLiteral x | typeof! (BoolLiteral x) Bool

	Decl (Name n) (Type ((@ t) r)) (DType functiondecl) (@ m) -> Decl (Name n) (Type ((@ t) r)) (DType functiondecl) (@ m) | returntypeof! n r | intypeof! n t
	Decl (Name n) (Type t) (DType o) (@ m) -> Decl (Name n) (Type t) (DType o) (@ m) | typeof! n t

	VarUse (Name x) -> VarUse (Name x) | typeof x t | typeof! (VarUse (Name x)) t
	FunctionCall n (@ a) -> TypedFunctionCall (CollectTypes (0 0) (@ a)) n (@ a) | returntypeof n r | typeof! (FunctionCall n (@ a)) r

typecheckGroundF:

	CollectTypes (0 0 (@ b)) -> b
	CollectTypes b (TypedFunctionCall t n (@ a)) (@ k) -> CollectTypes ((@ b) r) (@ k) | returntypeof n r
	CollectTypes b e (@ k) -> CollectTypes ((@ b) r) (@ k) | typeof e r

typecheckFunctionCall:

	TypedFunctionCall t f (@ a) -> FunctionCall f (@ a) | intypeof f t | returntypeof f r | typeof! (FunctionCall f (@ a)) r
	TypedFunctionCall t f (@ a) -> TypeError (m t) FunctionCall f (@ a) | intypeof f m

typecheckAssignment:

	Decl (Name n) (Type t) (DType assignment) e -> Decl (Name n) (Type t) (DType assignment) e | typeof e t
	Decl (Name n) (Type t) (DType assignment) e -> TypeError (h t) Decl (Name n) (Type t) (DType assignment) e | typeof e h

	Assignment (Name n) e -> Assignment (Name n) e | typeof n t | typeof e t
	Assignment (Name n) v -> TypeError (m k) Assignment (Name n) v  | typeof n m | typeof e k

typecheckReturn:

	Decl (Name n) t (DType functiondecl) (RName x) (@ a) -> Decl (Name n) t (DType functiondecl) (@ a) | returntypeof n r | returntypeof! x r

	ReturnClause e (RName x) ->	ReturnClause e (RName x) | typeof e t | returntypeof x t
	ReturnClause e (RName x) ->	TypeError (r t) ReturnClause e (RName x) | typeof e t | returntypeof x r

typecheckControls:

	WhileClause e (@ b) -> WhileClause e (@ b) | typeof e Bool
	WhileClause e (@ b) -> TypeError (Bool t) WhileClause e (@ b) | typeof e t

	IfClause e (@ b) -> IfClause e (@ b) | typeof e Bool
	IfClause e (@ b) -> TypeError (Bool t) IfClause e (@ b) | typeof e t

unalpha:

	Name a -> Name b t | nameof a b | typeof a t
