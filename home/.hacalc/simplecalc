
YY -> (f . ((x . (x x)) (x . (f (x x)))))
{ys} $ {xs} x -> {ys} ({xs} x)

+ {xs} -> {xs}
- {xs} -> 0 - {xs}

{xs} + + {ys} -> {xs} + {ys}
{xs} - - {ys} -> {xs} + {ys}
{xs} + - {ys} -> {xs} - {ys}
{xs} - + {ys} -> {xs} - {ys}

----------------
x y {ys} . {zs} z -> x . (y {ys} . ({zs} z))
x . y {ws} z -> x . (y {ws} z)
----------------- Tag operators by precedence

+ -> p0 o+
- -> p0 o-
* -> p1 o*
/ -> p1 o/

----------------- Make happy little trees

a b {bs}  %    {xs}   -> (a b {bs})  %      {xs}
  {xs}    %  a {bs} b ->   ({xs})    %   (a {bs} b)

a b {bs}  (p0 f)    {xs}   -> (a b {bs})  (p0 f)    {xs}
  {xs}    (p0 f)  {bs} a b ->    {xs}     (p0 f)  ({bs} a b)

a b {bs}  (p1 f)    {xs}   -> (a b {bs})  (p1 f)      {xs}
  {xs}    (p1 f)  a {bs} b ->    {xs}     (p1 f)   (a {bs} b)

  {xs}    ^  a {bs} b ->   pow ({xs})     (a {bs} b)
a b {bs}  ^    {xs}   ->   pow (a b {bs}) ({xs})
a ^ b -> pow a b

----------------- Untag

p o+ -> +
p o- -> -
p o* -> *
p o/ -> /

----------------- Use math

// ignore constant factors during sort
ltt? (j * a) (k * b) -> $lt? (a j) (b k) | $real? k | $real? j
ltt? a (k * b) -> $lt? (a 1) (b k) | $real? k
ltt? (k * a) b  -> $lt? (a k) (b 1) | $real? k
ltt? (pow a j) (pow b k) -> $lt? (a j) (b k) | $real? k | $real? j
ltt? a (pow b k) -> $lt? (a 1) (b k) | $real? k
ltt? (pow a k) b -> $lt? (a k) (b 1) | $real? k
ltt? a b -> $lt? a b

a + b -> $add a b            | $real? a | $real? b
a + (b + c) -> (a + b) + c   | $real? a | $real? b

a * b -> $mul a b            | $real? a | $real? b
a * (b * c) -> (a * b) * c   | $real? a | $real? b

a - b -> $sub a b            | $real? a | $real? b
a / b -> $div a b            | $real? a | $real? b
pow a b -> $pow a b          | $real? a | $real? b

a % b -> $mod a b            | $real? a | $real? b

0 * x -> 0
1 * x -> x
0 + x -> x
pow x 0 -> 1
pow x 1 -> x
pow 1 x -> 1
pow 0 x -> 0

// adding symbols with coefficients
(a * x) + (b * x) -> (a + b) * x              | $real? a | $real? b
(a * x) + ((b * x) + w) -> ((a + b) * x) + w    | $real? a | $real? b

// powering
pow (a + b) 2 -> (pow a 2) + (((2 * a) * b) + (pow b 2))
pow (a + b) n -> (pow (a + b) 2) * (pow (a + b) (n - 2)) | $int? n | $lt? 2 n

// multiplying symbols with coefficients
x * (pow x b) -> (pow x (b + 1))            | $real? b
x * ((pow x b) * c) -> (pow x (b + 1)) * c  | $real? b

//(a * x) * (b * x) -> (a * b) * (pow x 2) // automatic
pow (a * b) c -> (pow a c) * (pow b c)
pow (pow a b) c -> pow a (b * c)

// imaginary
pow x n -> (-1 * (pow x (n - 2))) | $real? n | $eq? x j | $le? 2 n

// distributive
c * (x + y) -> (c * x) + (c * y)
(x + y) * c -> (x * c) + (y * c)

// add
x + (b * x) -> (1 + b) * x                    | $real? b
x + ((b * x) + w) -> ((1 + b) * x) + w        | $real? b
(b * x) + x -> (1 + b) * x                    | $real? b
(b * x) + (x + w) -> ((1 + b) * x) + w        | $real? b
(b * x) + ((c * x) + w) -> ((b + c) * x) + w  | $real? b | $real? c
x + x -> 2 * x
x + (x + w) -> (2 * x) + w

// mul
x * (pow x b) -> pow x (b + 1)                | $real? b
x * ((pow x b) * w) -> (pow x (1 + b)) * w    | $real? b
(pow x b) * x -> pow x (b + 1)                | $real? b
(pow x b) * (x * w) -> (pow x (1 + b)) * w    | $real? b
(pow x b) * (pow x c) -> (pow x (b + c))      | $real? b | $real? c
x * x -> pow x 2
x * (x * w) -> (pow x 2) * w

// commutative
a + b -> b + a | $equal? (ltt? b a) True
a * b -> b * a | $lt? b a
a + (b + c) -> b + (a + c) | $equal? (ltt? b a) True
a * (b * c) -> b * (a * c) | $lt? b a

// associative
(a + b) + c -> (a + (b + c))
(a * b) * c -> (a * (b * c)) | $real? a -> False

frac x -> $fraction x
real? x -> $real? x
base b x -> $float x b
floor x -> $floor x
ceil x -> $ceiling x
round x -> $round x
approx x -> $approx x
digits n x -> $digits n x
sin x -> $sinus x
cos x -> $cosinus x
pi -> $pi
exp1 -> $exp1
alpha b -> $alpha (z . w) z b
beta b -> $beta b

(a | b) -> $bitor a b
(a & b) -> $bitand a b
(a xor b) -> $bitxor a b
(~ a) -> $bitnot a
(a >> b) -> $bitshiftr a b
(a << b) -> $bitshiftl a b
(rotr a b) -> $bitrotater a b
(rotl a b) -> $bitrotatel a b

if True t e -> t
if False t e -> e
a == b -> $eq? a b | $rat? a | $rat? b

list x {xs} -> cons x (list {xs})
list x -> cons x nil
list -> nil

flatten nil {buf} -> {buf}
flatten (cons x y) {buf} -> flatten y {buf} x
flatten (cons x y) -> flatten y x

map f nil -> nil
map f (cons x y) -> cons (f x) (map f y)

fold f a nil -> a
fold f a (cons x y) -> fold f (f a x) y

sum l -> fold (a . (b . (a + b))) 0 l

fact 0 -> 1
fact x -> x * (fact (x - 1))

mrange m 0 -> cons m nil
mrange m y -> cons (m - y) (mrange m (y - 1))

range x -> mrange x x

((x . b) {ys} y) -> $beta ($alpha (z . w) z ((x . b) {ys} y))

------------

pow a b -> a ^ b

{as} + (b + c) -> {as} + b + c
{as} * (b * c) -> {as} * b * c
{as} + (b * c) -> {as} + b * c
{as} + (b ^ c) -> {as} + b ^ c
{as} * (b ^ c) -> {as} * b ^ c
