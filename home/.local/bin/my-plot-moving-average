#! /usr/bin/env python3

import matplotlib
matplotlib.use("TkAgg")  # or you could use 'Qt5Agg', 'GTKAgg', etc.

import numpy as np
import matplotlib.pyplot as plt

def normal_distribution_pdf(x, mu=0, sigma=1):
    return (1 / np.sqrt(2 * np.pi * sigma ** 2)) * np.exp(-((x - mu) ** 2) / (2 * sigma ** 2))

def normal_distribution_arr(n, mu=0, sigma=1):
    step = 1  # Step size
    ladder = np.arange(1, n // 2, step)
    x_values = np.append(np.append(-1 * ladder[::-1], np.array([1])), ladder)
    print(x_values)
    y_values = normal_distribution_pdf(x_values, mu=mu, sigma=sigma)
    print(np.round(y_values, 2))
    # exit(1)
    return y_values

exponent = 1.3

myinput = [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# mymask = [1 / (exponent**(i + 1)) for i in range(len(myinput) // 2)]
mymask = normal_distribution_arr(len(myinput), sigma=5)
# mymask = list(reversed(mymask)) + ([] if len(myinput) % 2 == 0 else [1]) + mymask
# mymask = list(reversed(mymask)) + [1] + mymask

print(mymask)

# Define the vectors A and B
# A = np.array(list(reversed(myinput)))
A = np.array(list(myinput))
B = np.array(mymask)

# Pad zeros to make lengths equal and to double the length for cyclic convolution
pad_len = len(A) + len(B) - 1
A_padded = np.pad(A, (0, pad_len - len(A)), 'constant')
B_padded = np.pad(B, (0, pad_len - len(B)), 'constant')

# A_padded = A
# B_padded = B

# Compute FFT
A_fft = np.fft.fft(A_padded)
B_fft = np.fft.fft(B_padded)

# Element-wise multiplication
C_fft = A_fft * B_fft

# Compute IFFT
C = np.fft.ifft(C_fft).real  # Take only the real part

# Remove any potential numerical artifacts (very small numbers)
C = np.round(C, 10) / 3

print(list(C))

# Plotting with a connected line
plt.figure(figsize=(10, 5))
plt.plot(C, marker='o')
plt.title('Convolution Result (C)')
plt.xlabel('Index')
plt.ylabel('Value')
plt.grid(True)
plt.show()
